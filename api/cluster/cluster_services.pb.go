// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster/cluster_services.proto

package cluster

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterDetails_ClusterType int32

const (
	ClusterDetails_KUBERNETES ClusterDetails_ClusterType = 0
	ClusterDetails_AWS        ClusterDetails_ClusterType = 1
	ClusterDetails_AZURE      ClusterDetails_ClusterType = 2
	ClusterDetails_GOOGLE     ClusterDetails_ClusterType = 3
)

var ClusterDetails_ClusterType_name = map[int32]string{
	0: "KUBERNETES",
	1: "AWS",
	2: "AZURE",
	3: "GOOGLE",
}

var ClusterDetails_ClusterType_value = map[string]int32{
	"KUBERNETES": 0,
	"AWS":        1,
	"AZURE":      2,
	"GOOGLE":     3,
}

func (x ClusterDetails_ClusterType) String() string {
	return proto.EnumName(ClusterDetails_ClusterType_name, int32(x))
}

func (ClusterDetails_ClusterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e508423385bc46d, []int{2, 0}
}

type RegionRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionRequest) Reset()         { *m = RegionRequest{} }
func (m *RegionRequest) String() string { return proto.CompactTextString(m) }
func (*RegionRequest) ProtoMessage()    {}
func (*RegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e508423385bc46d, []int{0}
}

func (m *RegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegionRequest.Unmarshal(m, b)
}
func (m *RegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegionRequest.Marshal(b, m, deterministic)
}
func (m *RegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionRequest.Merge(m, src)
}
func (m *RegionRequest) XXX_Size() int {
	return xxx_messageInfo_RegionRequest.Size(m)
}
func (m *RegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegionRequest proto.InternalMessageInfo

func (m *RegionRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type ClusterId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterId) Reset()         { *m = ClusterId{} }
func (m *ClusterId) String() string { return proto.CompactTextString(m) }
func (*ClusterId) ProtoMessage()    {}
func (*ClusterId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e508423385bc46d, []int{1}
}

func (m *ClusterId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterId.Unmarshal(m, b)
}
func (m *ClusterId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterId.Marshal(b, m, deterministic)
}
func (m *ClusterId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterId.Merge(m, src)
}
func (m *ClusterId) XXX_Size() int {
	return xxx_messageInfo_ClusterId.Size(m)
}
func (m *ClusterId) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterId.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterId proto.InternalMessageInfo

func (m *ClusterId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ClusterDetails struct {
	ProvisionerImage     string                     `protobuf:"bytes,1,opt,name=provisionerImage,proto3" json:"provisionerImage,omitempty"`
	Type                 ClusterDetails_ClusterType `protobuf:"varint,2,opt,name=type,proto3,enum=cluster.ClusterDetails_ClusterType" json:"type,omitempty"`
	Data                 []byte                     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Credentials          []byte                     `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ClusterDetails) Reset()         { *m = ClusterDetails{} }
func (m *ClusterDetails) String() string { return proto.CompactTextString(m) }
func (*ClusterDetails) ProtoMessage()    {}
func (*ClusterDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e508423385bc46d, []int{2}
}

func (m *ClusterDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterDetails.Unmarshal(m, b)
}
func (m *ClusterDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterDetails.Marshal(b, m, deterministic)
}
func (m *ClusterDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDetails.Merge(m, src)
}
func (m *ClusterDetails) XXX_Size() int {
	return xxx_messageInfo_ClusterDetails.Size(m)
}
func (m *ClusterDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDetails proto.InternalMessageInfo

func (m *ClusterDetails) GetProvisionerImage() string {
	if m != nil {
		return m.ProvisionerImage
	}
	return ""
}

func (m *ClusterDetails) GetType() ClusterDetails_ClusterType {
	if m != nil {
		return m.Type
	}
	return ClusterDetails_KUBERNETES
}

func (m *ClusterDetails) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ClusterDetails) GetCredentials() []byte {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func init() {
	proto.RegisterEnum("cluster.ClusterDetails_ClusterType", ClusterDetails_ClusterType_name, ClusterDetails_ClusterType_value)
	proto.RegisterType((*RegionRequest)(nil), "cluster.RegionRequest")
	proto.RegisterType((*ClusterId)(nil), "cluster.ClusterId")
	proto.RegisterType((*ClusterDetails)(nil), "cluster.ClusterDetails")
}

func init() { proto.RegisterFile("cluster/cluster_services.proto", fileDescriptor_6e508423385bc46d) }

var fileDescriptor_6e508423385bc46d = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x5d, 0x4b, 0x02, 0x41,
	0x14, 0x6d, 0x57, 0x53, 0xbc, 0xe6, 0xb2, 0xdd, 0xc0, 0x16, 0x83, 0x58, 0xb6, 0x87, 0xa4, 0x07,
	0x03, 0x7b, 0xe8, 0x29, 0x48, 0x6b, 0x13, 0x29, 0x12, 0x46, 0x25, 0xf0, 0x25, 0x36, 0xf7, 0x22,
	0x03, 0xe6, 0x6c, 0x33, 0xa3, 0xe0, 0x0f, 0xe9, 0x4f, 0xf6, 0x2b, 0x82, 0xdd, 0x31, 0x3f, 0xaa,
	0xa7, 0x99, 0x7b, 0xee, 0x3d, 0x87, 0x7b, 0xee, 0x81, 0xd3, 0xf1, 0x74, 0xae, 0x34, 0xc9, 0x4b,
	0xf3, 0xbe, 0x2a, 0x92, 0x0b, 0x3e, 0x26, 0xd5, 0x48, 0xa4, 0xd0, 0x02, 0x8b, 0x06, 0x0f, 0xce,
	0xa1, 0xc2, 0x68, 0xc2, 0xc5, 0x8c, 0xd1, 0xc7, 0x9c, 0x94, 0xc6, 0x2a, 0x14, 0x64, 0x0a, 0x78,
	0x96, 0x6f, 0xd5, 0x4b, 0xcc, 0x54, 0xc1, 0x09, 0x94, 0xee, 0x32, 0x4e, 0x37, 0x46, 0x07, 0x6c,
	0x1e, 0x9b, 0x01, 0x9b, 0xc7, 0xc1, 0x97, 0x05, 0x8e, 0xe9, 0xde, 0x93, 0x8e, 0xf8, 0x54, 0xe1,
	0x05, 0xb8, 0x89, 0x14, 0x0b, 0xae, 0xb8, 0x98, 0x91, 0xec, 0xbe, 0x47, 0x13, 0x32, 0x84, 0x5f,
	0x38, 0x5e, 0x43, 0x5e, 0x2f, 0x13, 0xf2, 0x6c, 0xdf, 0xaa, 0x3b, 0xcd, 0xb3, 0x86, 0x59, 0xae,
	0xb1, 0x2d, 0xb9, 0x2a, 0x07, 0xcb, 0x84, 0x58, 0x4a, 0x40, 0x84, 0x7c, 0x1c, 0xe9, 0xc8, 0xcb,
	0xf9, 0x56, 0xfd, 0x80, 0xa5, 0x7f, 0xf4, 0xa1, 0x3c, 0x96, 0x14, 0xd3, 0x4c, 0xf3, 0x68, 0xaa,
	0xbc, 0x7c, 0xda, 0xda, 0x84, 0x82, 0x1b, 0x28, 0x6f, 0x48, 0xa1, 0x03, 0xf0, 0x38, 0x6c, 0x87,
	0xec, 0x39, 0x1c, 0x84, 0x7d, 0x77, 0x0f, 0x8b, 0x90, 0x6b, 0xbd, 0xf4, 0x5d, 0x0b, 0x4b, 0xb0,
	0xdf, 0x1a, 0x0d, 0x59, 0xe8, 0xda, 0x08, 0x50, 0xe8, 0xf4, 0x7a, 0x9d, 0xa7, 0xd0, 0xcd, 0x35,
	0x3f, 0xd7, 0x66, 0xfb, 0xd9, 0x55, 0xf1, 0x16, 0x0e, 0x3b, 0xa4, 0x77, 0x2e, 0x80, 0xbb, 0x3e,
	0xba, 0x71, 0xed, 0xf8, 0x1f, 0x6f, 0xd8, 0x82, 0xa3, 0xb5, 0xc2, 0x83, 0x90, 0x59, 0x28, 0x58,
	0xfd, 0x99, 0xdf, 0x4a, 0xa9, 0xf6, 0x87, 0x76, 0xbb, 0x32, 0x2a, 0x47, 0x09, 0x5f, 0x25, 0xfe,
	0x56, 0x48, 0x93, 0xbe, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x04, 0x91, 0x31, 0xaf, 0x0b, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterServiceClient interface {
	GetClusterDetails(ctx context.Context, in *ClusterId, opts ...grpc.CallOption) (*ClusterDetails, error)
	GetClusterForRegion(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*ClusterId, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) GetClusterDetails(ctx context.Context, in *ClusterId, opts ...grpc.CallOption) (*ClusterDetails, error) {
	out := new(ClusterDetails)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/GetClusterDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetClusterForRegion(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*ClusterId, error) {
	out := new(ClusterId)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/GetClusterForRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
type ClusterServiceServer interface {
	GetClusterDetails(context.Context, *ClusterId) (*ClusterDetails, error)
	GetClusterForRegion(context.Context, *RegionRequest) (*ClusterId, error)
}

// UnimplementedClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (*UnimplementedClusterServiceServer) GetClusterDetails(ctx context.Context, req *ClusterId) (*ClusterDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterDetails not implemented")
}
func (*UnimplementedClusterServiceServer) GetClusterForRegion(ctx context.Context, req *RegionRequest) (*ClusterId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterForRegion not implemented")
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_GetClusterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetClusterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/GetClusterDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetClusterDetails(ctx, req.(*ClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetClusterForRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetClusterForRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/GetClusterForRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetClusterForRegion(ctx, req.(*RegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterDetails",
			Handler:    _ClusterService_GetClusterDetails_Handler,
		},
		{
			MethodName: "GetClusterForRegion",
			Handler:    _ClusterService_GetClusterForRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster/cluster_services.proto",
}
